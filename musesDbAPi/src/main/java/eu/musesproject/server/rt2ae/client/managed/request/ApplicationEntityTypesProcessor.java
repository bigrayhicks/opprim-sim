// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package eu.musesproject.server.rt2ae.client.managed.request;
import com.google.web.bindery.requestfactory.shared.EntityProxy;
import eu.musesproject.server.rt2ae.client.proxy.AccessrequestProxy;
import eu.musesproject.server.rt2ae.client.proxy.AssetProxy;
import eu.musesproject.server.rt2ae.client.proxy.ClueProxy;
import eu.musesproject.server.rt2ae.client.proxy.DecisionProxy;
import eu.musesproject.server.rt2ae.client.proxy.DeviceProxy;
import eu.musesproject.server.rt2ae.client.proxy.DeviceSecurityStateProxy;
import eu.musesproject.server.rt2ae.client.proxy.OpportunityProxy;
import eu.musesproject.server.rt2ae.client.proxy.OutcomeProxy;
import eu.musesproject.server.rt2ae.client.proxy.RiskPolicyProxy;
import eu.musesproject.server.rt2ae.client.proxy.RiskcommunicationProxy;
import eu.musesproject.server.rt2ae.client.proxy.RiskinformationProxy;
import eu.musesproject.server.rt2ae.client.proxy.RisktreatmentProxy;
import eu.musesproject.server.rt2ae.client.proxy.SecurityIncidentProxy;
import eu.musesproject.server.rt2ae.client.proxy.ThreatProxy;
import eu.musesproject.server.rt2ae.client.proxy.UserActionProxy;
import eu.musesproject.server.rt2ae.client.proxy.UserProxy;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public abstract class ApplicationEntityTypesProcessor<T> {

    private final T defaultValue;

    private T result;

    public ApplicationEntityTypesProcessor() {
        defaultValue = null;
    }

    public ApplicationEntityTypesProcessor(T defaultValue) {
        this.defaultValue = defaultValue;
    }

    public static Set<Class<? extends com.google.web.bindery.requestfactory.shared.EntityProxy>> getAll() {
        Set<Class<? extends EntityProxy>> rtn = new HashSet<Class<? extends EntityProxy>>();
        rtn.add(AccessrequestProxy.class);
        rtn.add(AssetProxy.class);
        rtn.add(ClueProxy.class);
        rtn.add(DecisionProxy.class);
        rtn.add(DeviceProxy.class);
        rtn.add(DeviceSecurityStateProxy.class);
        rtn.add(OpportunityProxy.class);
        rtn.add(OutcomeProxy.class);
        rtn.add(RiskPolicyProxy.class);
        rtn.add(RiskcommunicationProxy.class);
        rtn.add(RiskinformationProxy.class);
        rtn.add(RisktreatmentProxy.class);
        rtn.add(SecurityIncidentProxy.class);
        rtn.add(ThreatProxy.class);
        rtn.add(UserActionProxy.class);
        rtn.add(UserProxy.class);
        return Collections.unmodifiableSet(rtn);
    }

    private static void process(ApplicationEntityTypesProcessor<?> processor, Class<?> clazz) {
        if (AccessrequestProxy.class.equals(clazz)) {
            processor.handleAccessrequest((AccessrequestProxy) null);
            return;
        }
        if (AssetProxy.class.equals(clazz)) {
            processor.handleAsset((AssetProxy) null);
            return;
        }
        if (ClueProxy.class.equals(clazz)) {
            processor.handleClue((ClueProxy) null);
            return;
        }
        if (DecisionProxy.class.equals(clazz)) {
            processor.handleDecision((DecisionProxy) null);
            return;
        }
        if (DeviceProxy.class.equals(clazz)) {
            processor.handleDevice((DeviceProxy) null);
            return;
        }
        if (DeviceSecurityStateProxy.class.equals(clazz)) {
            processor.handleDeviceSecurityState((DeviceSecurityStateProxy) null);
            return;
        }
        if (OpportunityProxy.class.equals(clazz)) {
            processor.handleOpportunity((OpportunityProxy) null);
            return;
        }
        if (OutcomeProxy.class.equals(clazz)) {
            processor.handleOutcome((OutcomeProxy) null);
            return;
        }
        if (RiskPolicyProxy.class.equals(clazz)) {
            processor.handleRiskPolicy((RiskPolicyProxy) null);
            return;
        }
        if (RiskcommunicationProxy.class.equals(clazz)) {
            processor.handleRiskcommunication((RiskcommunicationProxy) null);
            return;
        }
        if (RiskinformationProxy.class.equals(clazz)) {
            processor.handleRiskinformation((RiskinformationProxy) null);
            return;
        }
        if (RisktreatmentProxy.class.equals(clazz)) {
            processor.handleRisktreatment((RisktreatmentProxy) null);
            return;
        }
        if (SecurityIncidentProxy.class.equals(clazz)) {
            processor.handleSecurityIncident((SecurityIncidentProxy) null);
            return;
        }
        if (ThreatProxy.class.equals(clazz)) {
            processor.handleThreat((ThreatProxy) null);
            return;
        }
        if (UserActionProxy.class.equals(clazz)) {
            processor.handleUserAction((UserActionProxy) null);
            return;
        }
        if (UserProxy.class.equals(clazz)) {
            processor.handleUser((UserProxy) null);
            return;
        }
        processor.handleNonProxy(null);
    }

    private static void process(ApplicationEntityTypesProcessor<?> processor, Object proxy) {
        if (proxy instanceof AccessrequestProxy) {
            processor.handleAccessrequest((AccessrequestProxy) proxy);
            return;
        }
        if (proxy instanceof AssetProxy) {
            processor.handleAsset((AssetProxy) proxy);
            return;
        }
        if (proxy instanceof ClueProxy) {
            processor.handleClue((ClueProxy) proxy);
            return;
        }
        if (proxy instanceof DecisionProxy) {
            processor.handleDecision((DecisionProxy) proxy);
            return;
        }
        if (proxy instanceof DeviceProxy) {
            processor.handleDevice((DeviceProxy) proxy);
            return;
        }
        if (proxy instanceof DeviceSecurityStateProxy) {
            processor.handleDeviceSecurityState((DeviceSecurityStateProxy) proxy);
            return;
        }
        if (proxy instanceof OpportunityProxy) {
            processor.handleOpportunity((OpportunityProxy) proxy);
            return;
        }
        if (proxy instanceof OutcomeProxy) {
            processor.handleOutcome((OutcomeProxy) proxy);
            return;
        }
        if (proxy instanceof RiskPolicyProxy) {
            processor.handleRiskPolicy((RiskPolicyProxy) proxy);
            return;
        }
        if (proxy instanceof RiskcommunicationProxy) {
            processor.handleRiskcommunication((RiskcommunicationProxy) proxy);
            return;
        }
        if (proxy instanceof RiskinformationProxy) {
            processor.handleRiskinformation((RiskinformationProxy) proxy);
            return;
        }
        if (proxy instanceof RisktreatmentProxy) {
            processor.handleRisktreatment((RisktreatmentProxy) proxy);
            return;
        }
        if (proxy instanceof SecurityIncidentProxy) {
            processor.handleSecurityIncident((SecurityIncidentProxy) proxy);
            return;
        }
        if (proxy instanceof ThreatProxy) {
            processor.handleThreat((ThreatProxy) proxy);
            return;
        }
        if (proxy instanceof UserActionProxy) {
            processor.handleUserAction((UserActionProxy) proxy);
            return;
        }
        if (proxy instanceof UserProxy) {
            processor.handleUser((UserProxy) proxy);
            return;
        }
        processor.handleNonProxy(proxy);
    }

    public void handleNonProxy(Object object) {
    }

    public abstract void handleAccessrequest(AccessrequestProxy proxy);

    public abstract void handleAsset(AssetProxy proxy);

    public abstract void handleClue(ClueProxy proxy);

    public abstract void handleDecision(DecisionProxy proxy);

    public abstract void handleDevice(DeviceProxy proxy);

    public abstract void handleDeviceSecurityState(DeviceSecurityStateProxy proxy);

    public abstract void handleOpportunity(OpportunityProxy proxy);

    public abstract void handleOutcome(OutcomeProxy proxy);

    public abstract void handleRiskPolicy(RiskPolicyProxy proxy);

    public abstract void handleRiskcommunication(RiskcommunicationProxy proxy);

    public abstract void handleRiskinformation(RiskinformationProxy proxy);

    public abstract void handleRisktreatment(RisktreatmentProxy proxy);

    public abstract void handleSecurityIncident(SecurityIncidentProxy proxy);

    public abstract void handleThreat(ThreatProxy proxy);

    public abstract void handleUserAction(UserActionProxy proxy);

    public abstract void handleUser(UserProxy proxy);

    public T process(Class<?> clazz) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, clazz);
        return result;
    }

    public T process(Object proxy) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, proxy);
        return result;
    }

    protected void setResult(T result) {
        this.result = result;
    }
}
