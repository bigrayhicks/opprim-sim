// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package eu.musesproject.server.rt2ae.client.managed.ui.desktop;
import com.google.gwt.core.client.GWT;
import com.google.gwt.i18n.client.DateTimeFormat;
import com.google.gwt.i18n.client.NumberFormat;
import com.google.gwt.text.client.DateTimeFormatRenderer;
import com.google.gwt.text.shared.AbstractRenderer;
import com.google.gwt.text.shared.Renderer;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.cellview.client.CellTable;
import com.google.gwt.user.cellview.client.HasKeyboardSelectionPolicy.KeyboardSelectionPolicy;
import com.google.gwt.user.cellview.client.TextColumn;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.HTMLPanel;
import eu.musesproject.server.rt2ae.client.managed.ui.editor.AccessrequestSetEditor;
import eu.musesproject.server.rt2ae.client.managed.ui.editor.DeviceSetEditor;
import eu.musesproject.server.rt2ae.client.managed.ui.editor.SecurityIncidentSetEditor;
import eu.musesproject.server.rt2ae.client.proxy.AccessrequestProxy;
import eu.musesproject.server.rt2ae.client.proxy.DeviceProxy;
import eu.musesproject.server.rt2ae.client.proxy.SecurityIncidentProxy;
import eu.musesproject.server.rt2ae.client.proxy.UserProxy;
import eu.musesproject.server.rt2ae.client.scaffold.place.AbstractProxyListView;
import java.util.HashSet;
import java.util.Set;

public abstract class UserDesktopListView_Roo_Gwt extends AbstractProxyListView<UserProxy> {

    @UiField
    CellTable<UserProxy> table;

    protected Set<String> paths = new HashSet<String>();

    public void init() {
        paths.add("userId");
        table.addColumn(new TextColumn<UserProxy>() {

            Renderer<java.lang.Integer> renderer = new AbstractRenderer<java.lang.Integer>() {

                public String render(java.lang.Integer obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(UserProxy object) {
                return renderer.render(object.getUserId());
            }
        }, "User Id");
        paths.add("accessrequests");
        table.addColumn(new TextColumn<UserProxy>() {

            Renderer<java.util.Set> renderer = eu.musesproject.server.rt2ae.client.scaffold.place.CollectionRenderer.of(eu.musesproject.server.rt2ae.client.managed.ui.renderer.AccessrequestProxyRenderer.instance());

            @Override
            public String getValue(UserProxy object) {
                return renderer.render(object.getAccessrequests());
            }
        }, "Accessrequests");
        paths.add("devices");
        table.addColumn(new TextColumn<UserProxy>() {

            Renderer<java.util.Set> renderer = eu.musesproject.server.rt2ae.client.scaffold.place.CollectionRenderer.of(eu.musesproject.server.rt2ae.client.managed.ui.renderer.DeviceProxyRenderer.instance());

            @Override
            public String getValue(UserProxy object) {
                return renderer.render(object.getDevices());
            }
        }, "Devices");
        paths.add("securityIncidents");
        table.addColumn(new TextColumn<UserProxy>() {

            Renderer<java.util.Set> renderer = eu.musesproject.server.rt2ae.client.scaffold.place.CollectionRenderer.of(eu.musesproject.server.rt2ae.client.managed.ui.renderer.SecurityIncidentProxyRenderer.instance());

            @Override
            public String getValue(UserProxy object) {
                return renderer.render(object.getSecurityIncidents());
            }
        }, "Security Incidents");
        paths.add("name");
        table.addColumn(new TextColumn<UserProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(UserProxy object) {
                return renderer.render(object.getName());
            }
        }, "Name");
        paths.add("surname");
        table.addColumn(new TextColumn<UserProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(UserProxy object) {
                return renderer.render(object.getSurname());
            }
        }, "Surname");
        paths.add("email");
        table.addColumn(new TextColumn<UserProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(UserProxy object) {
                return renderer.render(object.getEmail());
            }
        }, "Email");
        paths.add("trustvalue");
        table.addColumn(new TextColumn<UserProxy>() {

            Renderer<java.lang.Double> renderer = new AbstractRenderer<java.lang.Double>() {

                public String render(java.lang.Double obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(UserProxy object) {
                return renderer.render(object.getTrustvalue());
            }
        }, "Trustvalue");
        paths.add("hourlyCost");
        table.addColumn(new TextColumn<UserProxy>() {

            Renderer<java.lang.Double> renderer = new AbstractRenderer<java.lang.Double>() {

                public String render(java.lang.Double obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(UserProxy object) {
                return renderer.render(object.getHourlyCost());
            }
        }, "Hourly Cost");
        paths.add("ttl");
        table.addColumn(new TextColumn<UserProxy>() {

            Renderer<java.lang.Integer> renderer = new AbstractRenderer<java.lang.Integer>() {

                public String render(java.lang.Integer obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(UserProxy object) {
                return renderer.render(object.getTtl());
            }
        }, "Ttl");
    }
}
