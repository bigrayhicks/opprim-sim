// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package eu.musesproject.server.rt2ae.client.managed.activity;
import com.google.gwt.activity.shared.Activity;
import com.google.gwt.activity.shared.ActivityMapper;
import com.google.gwt.place.shared.Place;
import com.google.gwt.place.shared.PlaceController;
import com.google.inject.Inject;
import eu.musesproject.server.rt2ae.client.managed.request.ApplicationEntityTypesProcessor;
import eu.musesproject.server.rt2ae.client.managed.request.ApplicationRequestFactory;
import eu.musesproject.server.rt2ae.client.proxy.AccessrequestProxy;
import eu.musesproject.server.rt2ae.client.proxy.AssetProxy;
import eu.musesproject.server.rt2ae.client.proxy.ClueProxy;
import eu.musesproject.server.rt2ae.client.proxy.DecisionProxy;
import eu.musesproject.server.rt2ae.client.proxy.DeviceProxy;
import eu.musesproject.server.rt2ae.client.proxy.DeviceSecurityStateProxy;
import eu.musesproject.server.rt2ae.client.proxy.OpportunityProxy;
import eu.musesproject.server.rt2ae.client.proxy.OutcomeProxy;
import eu.musesproject.server.rt2ae.client.proxy.RiskPolicyProxy;
import eu.musesproject.server.rt2ae.client.proxy.RiskcommunicationProxy;
import eu.musesproject.server.rt2ae.client.proxy.RiskinformationProxy;
import eu.musesproject.server.rt2ae.client.proxy.RisktreatmentProxy;
import eu.musesproject.server.rt2ae.client.proxy.SecurityIncidentProxy;
import eu.musesproject.server.rt2ae.client.proxy.ThreatProxy;
import eu.musesproject.server.rt2ae.client.proxy.UserActionProxy;
import eu.musesproject.server.rt2ae.client.proxy.UserProxy;
import eu.musesproject.server.rt2ae.client.scaffold.place.ProxyPlace;

public abstract class ApplicationDetailsActivities_Roo_Gwt implements ActivityMapper {

    protected ApplicationRequestFactory requests;

    protected PlaceController placeController;

    public Activity getActivity(Place place) {
        if (!(place instanceof ProxyPlace)) {
            return null;
        }
        final ProxyPlace proxyPlace = (ProxyPlace) place;
        return new ApplicationEntityTypesProcessor<Activity>() {

            @Override
            public void handleAccessrequest(AccessrequestProxy proxy) {
                setResult(new AccessrequestActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleAsset(AssetProxy proxy) {
                setResult(new AssetActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleClue(ClueProxy proxy) {
                setResult(new ClueActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleDecision(DecisionProxy proxy) {
                setResult(new DecisionActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleDevice(DeviceProxy proxy) {
                setResult(new DeviceActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleDeviceSecurityState(DeviceSecurityStateProxy proxy) {
                setResult(new DeviceSecurityStateActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleOpportunity(OpportunityProxy proxy) {
                setResult(new OpportunityActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleOutcome(OutcomeProxy proxy) {
                setResult(new OutcomeActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleRiskPolicy(RiskPolicyProxy proxy) {
                setResult(new RiskPolicyActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleRiskcommunication(RiskcommunicationProxy proxy) {
                setResult(new RiskcommunicationActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleRiskinformation(RiskinformationProxy proxy) {
                setResult(new RiskinformationActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleRisktreatment(RisktreatmentProxy proxy) {
                setResult(new RisktreatmentActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleSecurityIncident(SecurityIncidentProxy proxy) {
                setResult(new SecurityIncidentActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleThreat(ThreatProxy proxy) {
                setResult(new ThreatActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleUserAction(UserActionProxy proxy) {
                setResult(new UserActionActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleUser(UserProxy proxy) {
                setResult(new UserActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }
        }.process(proxyPlace.getProxyClass());
    }
}
